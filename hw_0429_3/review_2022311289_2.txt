- complexity/performance tradeoffs with non-blocking loads

- 요약
본 논문은 cache miss에서의 stall 영향을 줄이기 위해 고안된 non-blocking load의
다양한 구현법에 대해 논하고, 해당 방식의 조합을 이용한 benchmark를 통해 이후 cache
design 결정에 필요한 고려 요소들을 언급한다.

본 논문에서, cache miss는 세 가지 종류로 구분된다: primary miss는 특정 cache block에의 
첫 miss를 의미한다. 이후의 동일 cache block miss 중 HW 자원의 부족으로 stall이 일어날 경우
structural-stall miss, 그렇지 않은 경우 secondary miss라고 일컬어진다.
lockup-free cache의 구현은 위의 세 miss 해결 방안에 따라 implicitly addressed MSHR,
explicitly addressed MSHR로 구분되고 이와 별개로 in-cache MSHR, inverted MSHR 구조가 존재한다.

Implicitly addressed MSHR은 각 MSHR이 valid bit과 block request address를 가져 comparator를 통해
해당 block에의 primary miss 여부를 확인한다. 또한 각 word 별 valid bit, destination address
(register addrress) 및 추가 format info. 등이 저장되어 특정 word에의 secondary miss가 기록된다.
이와 같은 구조는 primary miss 이후에 특정 word에의 secondary miss가 오직 하나만 유지될 수 있다는 단점이 존재하여
컴파일러 단에서 동일 address에 두 번 접근하지 못하도록 하는 optimization이 추가로 필요하다.
또한 block 내 word 별로 정보를 저장하기 때문에 word 사이즈가 줄어 block 내 word 갯수가 증가할 경우
필요한 용량이 증가한다는 단점이 존재한다.
Explicitly addressed MSHR은 word 별 miss info에 추가로 해당 word address를 가짐으로써
상기의 문제를 해결한다. Implicitly addressed MSHR에 추가로 매 word field 별 address
bit 용량이 추가되나, block 내 word 갯수가 달라지더라도 필요 용량이 커지지는 않는 장점이 있다.
이와 같은 explicitly addressed MSHR은 동일 word에의 접근이 잦거나 word granularity가
작을 때 유용하다.
Implicit한 방식이 상대적으로 적은 용량에 구현이 가능한 반면 explicit한 방식은 한 cache block
내에서 효율적으로 miss info를 유지할 수 있다는 장단을 가진다. 즉, 만일 target benchmark가
동일 word에의 secondary miss가 잦다는 특성을 가질 경우 explicit, 그렇지 않을 경우 implicit하게
디자인될 수 있다. hybrid 방식으로 두 방식의 장점을 혼합하는 방법 또한 존재한다.
또한 이후 실험을 통해, cache size를 충분히 늘릴 수 있다 하더라도 상기의 디자인 choice가
resolve할 수 있는 miss가 일정 부분 존재하기 때문에 위와 같은 구조는 더욱 큰 cache 환경에서도
효율적으로 적용될 수 있음이 확인되었다.

In-Cache MSHR은 outstanding fetch의 target cache line은 data fetch 과정에서 
비어 있음에 착안하여, 매 cache line에 transit bit을 두어 해당 line이 fetch되는 
중임을 나타낸다. Transit 중일 때는 tag array와 data array에 각각 fetch address와
MSHR를 저장한다.
Inverted MSHR은, 상기의 implicitly/explicitly addressed MSHR이 매 outstanding fetch마다
정보를 저장하는 것에 반해, register, write buffer, program counter 등의 destination
별로 정보가 저장된다. 이는 fully-associative TLB와 비슷하게 구현되며, 이전의 MSHR 구조와는
달리 maximum outstanding fetch 제한이나 block 별 최대 miss 갯수에 제한이 없다.

상기의 MSHR 구조 채택을 위해 고려해야 하는 design choice에 관한 실험이 이루어졌다.
8KB direct mapped cache, 32B cache line, miss penalty 16 cycle의 환경 아래 다양한 benchmark가 실험되었다.
전반적으로는, MSHR의 고안, MSHR entry 갯수의 증가, 각 MSHR entry의 address field 갯수 증가가 모두 MCPI의 개선을 보였다. 
이때 사용된 benchmark들에서는, MSHR entry의 갯수를 늘려 outstanding miss의 수를 늘리는 것이 
각 MSHR entry의 address field의 수를 늘려 secondary miss의 수를 늘리는 것보다 효율적인 경우가 많음이 관찰되었다.
다만 컴파일러에 의한 코드 scheduling, cache organization 등에 의해 benchmark 결과가 영향을 받으므로 분석에 주의가 필요하다. 
그 예로, load latency가 늘어날 경우 load와 이에 해당하는 데이터 사용 instruction 사이에 또다른 load instruction이 
컴파일러를 통해 삽입되어 outstanding miss의 수를 늘리기 때문에 load latency 값에 따른 결과를 분석할 때에는 해당 속성이 고려되어야 한다.
다른 예로, load latency에 따라 컴파일러가 여러 load instruction을 모으는 경우가 있는데 이는 특히 direct mapped cache의 경우에
conflict miss를 일으킬 수 있다. 이와 같은 현상은 동일 실험을 fully associative cache에서 진행했을 때 목격된
MCPI flattening 현상을 통해 확인이 가능하다.
또한, cache design choice의 측면에서, 상기 서술한 implicit/explicit 구조 채택 실험과 cache size에 따른 
MSHR의 효과에 관한 실험이 이루어졌다. cache line size의 증가는 primary miss보다 secondary miss의 확률을 높이고, 
반대로 line size가 감소할 때에는 상대적으로 primary miss의 확률이 높아짐이 실험을 통해 확인되었다. 
이러한 line size의 차이에 상관없이 miss stall CPI는 miss penalty의 증가에 따라 (주로) 비선형적인 증가를 보였고,
integer benchmark의 경우 기본적인 single MSHR, single address field로도 충분한 MPCI 성능을 가짐이 드러났다.

- 장단점
본 논문에서 나타난 explicitly addressed MSHR은 기존의 implicit 방식에 word별 address info를
추가함으로써 기존의 문제를 cost effective하게 해결한 것으로 보인다. 다만, 다양한 실험 결과
중에서 상당수의 benchmark는 단순한 implicitly addressed MSHR만으로도 상대적으로 좋은 결과를
보이고 그렇지 않은 결과에서도 implicit 방식의 채택과 함께 sub-block 사이즈(granularity)를
조절하거나 cache line 사이즈를 조절하는 등 다양한 parameter 조정을 통해 explicit 방식과 비슷한
성능을 가질 수 있음이 나타나, 실제 환경에서의 효율성이 초기에 정의된 문제 대비 떨어지는 것처럼
보이는 단점이 존재한다.
또한 다양한 benchmark 하에서의 실험 및 다양한 parameter 조정을 통한 효과 검증을 수행하여 해당 구조가
실 환경에서 사용될 경우 고려해야 하는 다양한 환경적 요소를 정리하였다는 장점이 있다. 다만
상기한 대로 많은 benchmark에서 단순한 구조를 통한 sub-optimal 성능 확보가 가능했기 때문에,
실험 환경에 가한 assumption이 일부 완화되거나, 다양한 실 환경에서의 cache 성능 측정을 위한
더욱 좋은 benchmark 디자인을 위한 아이디어가 추가되었다면 좋았을 것이라는 아쉬움이 존재한다.
